-- Creación de la "External Table" para el archivo "ventas.csv": 
CREATE TABLE ventas_ext
(
ventas_id NUMBER(4),
fecha CHAR(10),
artista_id NUMBER(10),
monto NUMBER(10,2),
pais_origen VARCHAR(50)
)
ORGANIZATION EXTERNAL
(
 TYPE ORACLE_LOADER
 DEFAULT DIRECTORY ETL_FILES_DIR
 ACCESS PARAMETERS (
   RECORDS DELIMITED BY NEWLINE
   CHARACTERSET WE8ISO8859P1
   FIELDS TERMINATED BY ','
   MISSING FIELD VALUES ARE NULL
   (
   ventas_id CHAR(4),
   fecha CHAR(10),
   artista_id CHAR(10),
   monto CHAR(10),
   pais_origen CHAR(50)
 )
 )
 LOCATION ('ventas.csv')
)
REJECT LIMIT UNLIMITED;

-- Creación de la Tabla de Destino 'ventas_final':
CREATE TABLE ventas_final(
    ventas_final_id NUMBER PRIMARY KEY,
    fecha DATE,
    artista_id NUMBER,
    monto NUMBER,
    pais_origen VARCHAR2(50),
    categoria VARCHAR2(20) 
)

-- Evitar el error ORA-10027 (desbordamiento de buffer):
EXECUTE dbms_session.reset_package;
SET SERVEROUTPUT ON SIZE UNLIMITED
EXECUTE sys.dbms_output.enable(NULL);
CLEAR SCREEN

-- Realizo una consulta simple para comprobar la información de la Tabla Externa
   select * from ventas_ext;
   
-- Mediante esta consulta se puede ver la información de la Tabla Externa con más detalle:   
   SELECT column_name, data_type, data_length, data_precision, data_scale
   FROM user_tab_columns
   WHERE table_name = 'VENTAS_EXT';
   
-- Primer Procedimiento Almacenado: Convertir las el tipo CHAR de "fecha" a DATE:
create or replace procedure format_data (
    p_ventas_id_sin_convertir IN OUT ventas_ext.ventas_id%type,
    p_cadena_fecha_sin_convertir IN OUT ventas_ext.fecha%type,
    p_artista_id_sin_convertir IN OUT ventas_ext.artista_id%type,
    p_monto_sin_convertir IN OUT ventas_ext.monto%type)   
as
-- Declaración de la constante para la condición:
 v_condicion CONSTANT BOOLEAN :=
 p_ventas_id_sin_convertir IS NOT NULL 
 AND p_cadena_fecha_sin_convertir IS NOT NULL 
 AND p_artista_id_sin_convertir IS NOT NULL
 AND p_monto_sin_convertir IS NOT NULL;

BEGIN
    IF v_condicion THEN
    -- Convertir el 'id_ventas' de tipo CHAR a tipo NUMBER:
      p_ventas_id_sin_convertir := TO_NUMBER(p_ventas_id_sin_convertir);
      
    -- Convertir la 'fecha' de tipo CHAR a tipo DATE:
      p_cadena_fecha_sin_convertir := TO_DATE(p_cadena_fecha_sin_convertir, 'YYYY-MM-DD');

    -- Convertir el 'artista_id' de tipo CHAR a tipo NUMBER:
      p_artista_id_sin_convertir := TO_NUMBER(p_artista_id_sin_convertir);
      
    -- Convertir el 'monto' de tipo CHAR a tipo NUMBER:
      p_monto_sin_convertir := TO_NUMBER(p_monto_sin_convertir);
    END IF;
END;
/

-- Segundo Procedimiento Almacenado: Eliminar Valores Negativos del Monto:
create or replace procedure adjust_amount (p_monto IN OUT NUMBER)   
as
BEGIN
 IF p_monto < 0 THEN
 p_monto := 0; 
 ELSE
 p_monto := trunc(p_monto, 0);
 END IF;
END;
/

-- Tercer Procedimiento Almacenado: Asignación de Categoría 'Internacional' o 'Nacional':
create or replace procedure international_category (p_pais_origen VARCHAR2, p_categoria OUT VARCHAR2)   
as
v_categoría_internacional VARCHAR2(20) := 'Internacional';
v_categoría_nacional VARCHAR2(20) := 'Nacional';
BEGIN
 
 IF p_pais_origen != 'España' AND p_pais_origen != 'México' THEN
    p_categoria := v_categoría_internacional;
 ELSE
    p_categoria := v_categoría_nacional;
 END IF;
END;
/

/* Encapsulo toda la lógica en un procedimiento general: 'run_etl_process'. 
   Para luego automatizar el proceso usando: 'DBMS_SCHEDULER.CREATE_JOB'. */

CREATE OR REPLACE PROCEDURE run_etl_process 
IS
BEGIN
-- Creación del Bloque Anónimo:
DECLARE 
-- Colección para la extracción de los datos la External Table:
   TYPE ventas_artistas IS TABLE OF ventas_ext%rowtype INDEX BY PLS_INTEGER;
   
-- Bloque de Declaración de Variables y Constantes:
   VENTAS_ART ventas_artistas;
   v_categoría VARCHAR2(20);
   v_error BOOLEAN := FALSE;
   
   v_num_registros NUMBER := 0;
   v_contador_commit NUMBER := 0;
   v_num_commit NUMBER := 0;
   v_división_registros_entre_2 NUMBER;
   v_resultado_entre_2 NUMBER;
   v_división_registros_entre_4 NUMBER;
   v_resultado_entre_4 NUMBER;
   v_contador_commit_valor NUMBER := 0;
   
   RANGO_1 BOOLEAN := FALSE;
   RANGO_2 BOOLEAN := FALSE;
   CUATRO_COMMITS BOOLEAN := FALSE;
   DOS_COMMITS BOOLEAN := FALSE;
   
   
BEGIN
-- Extracción de los datos de la colección "ventas_artistas":
   SELECT * BULK COLLECT INTO VENTAS_ART FROM ventas_ext;
   
-- Borrado previo de la tabla:
   DBMS_OUTPUT.PUT_LINE('## Borrado Previo de la Tabla de Destino: ' || '"ventas_final" ##');
   select count(*) into v_num_registros from ventas_final;
   
   IF v_num_registros > 0 THEN
     DBMS_OUTPUT.PUT_LINE('??? La Tabla de Destino está llena ???. Ejecutando operación previa de borrado.');
    delete from ventas_final;
    ELSE
    DBMS_OUTPUT.PUT_LINE('??? La Tabla de Destino está vacía ???. Omitiendo operación previa de borrado.');
   END IF;

    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('## Transformación y Carga de los datos en la Tabla de Destino: ' || '"ventas_final" ##');
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('Información sobre los COMMITS realizados');
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
    
    v_división_registros_entre_4 := v_num_registros / 4; --> En este caso 250, porque son 1000 registros totales. 
    v_división_registros_entre_2 := v_num_registros / 2;
    
    v_resultado_entre_4 := v_división_registros_entre_4;
    v_resultado_entre_2 := v_división_registros_entre_2;
    
    RANGO_1 := v_num_registros >= 1000 AND v_num_registros <= 10000;
    RANGO_2 := v_num_registros >= 100 AND v_num_registros <= 500;
    
-- Para este caso particular usaré el bucle FOR en lugar de FORALL, debido a que hay operaciones más complejas:
    FOR i IN 1..VENTAS_ART.COUNT LOOP
      
    -- Establecer un SAVEPOINT para revertir los cambios en caso de error:
       SAVEPOINT iteracion_inicio;
       BEGIN
      -- 1. Transformar al tipo de datos correcto (NUMBER & DATE):
      format_data(VENTAS_ART(i).ventas_id, VENTAS_ART(i).fecha, VENTAS_ART(i).artista_id, VENTAS_ART(i).monto); 
      
      -- 2. Ajustar el Monto (reemplazar valores negativos por el valor 0):
      adjust_amount (VENTAS_ART(i).monto);
      
      -- 3. Asignación de la categoría 'Internacional' o 'Nacional' según corresponda:
      international_category(VENTAS_ART(i).pais_origen, v_categoría);
      
      -- 4. Carga de datos en la Tabla de Destino: 'ventas_final':
     INSERT INTO ventas_final VALUES(
     VENTAS_ART(i).ventas_id, VENTAS_ART(i).fecha, 
     VENTAS_ART(i).artista_id, VENTAS_ART(i).monto, 
     VENTAS_ART(i).pais_origen, v_categoría);
     
    /* Para evitar hacer un COMMIT por cada iteración (serían 1000 COMMITS), evaluo dinámicamente según el número de registros
       existentes, cada cuántos registros hacerlo: */
     v_contador_commit := v_contador_commit + i;
   
     CUATRO_COMMITS := v_contador_commit = v_división_registros_entre_4;
     DOS_COMMITS := v_contador_commit = v_división_registros_entre_2;
     
 IF RANGO_1 OR RANGO_2 THEN 
 
    IF RANGO_1 AND CUATRO_COMMITS THEN
    -- Si este proceso no genero ningún error, guardo los cambios:
    COMMIT;
    v_contador_commit_valor := v_contador_commit;
    v_división_registros_entre_4 := v_división_registros_entre_4 + v_resultado_entre_4;
    v_num_commit := v_num_commit + 1;
    DBMS_OUTPUT.PUT_LINE('COMMIT ' || v_num_commit || ' ITERACIÓN: ' || v_contador_commit_valor);
    
   ELSIF RANGO_2 AND DOS_COMMITS THEN
   -- Si este proceso no genero ningún error, guardo los cambios:
    COMMIT;
    v_contador_commit_valor := v_contador_commit;
    v_división_registros_entre_2 := v_división_registros_entre_2 + v_resultado_entre_2;
    v_num_commit := v_num_commit + 1;
    DBMS_OUTPUT.PUT_LINE('COMMIT ' || v_num_commit || ' ITERACIÓN: ' || v_contador_commit_valor);
    
   ELSE
   v_contador_commit := 0;
   v_num_commit := v_num_commit;     
   END IF; 

 END IF;  
 
     -- En caso de error, manejarlo con una excepción que revierta los cambios y registre el error: 
      EXCEPTION
        WHEN OTHERS THEN
                -- En caso de error, se revierte el proceso de nuevo desde el SAVEPOINT:
                ROLLBACK TO SAVEPOINT iteracion_inicio;
                v_error := TRUE;
                v_contador_commit := 0;
                v_num_commit := 0;  
    END; 
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
    
    -- Evaluar si surgió algún error durante el proceso, e imprimir un mensaje indicándolo:
      IF v_error THEN
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('?? Surgió un error en alguna iteración del bucle.');
        ELSE
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('??? El proceso se completó de forma correcta.');
      END IF; 
END;
END; 

/* Finalmente programo la tarea usando 'DBMS_SCHEDULER.CREATE_JOB', llamando al procedimiento run_etl_process(), 
  para que se ejecuta todos los días a las 18:30 */
  
BEGIN
    DBMS_SCHEDULER.CREATE_JOB(
        job_name        => 'RUN_ETL_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN run_etl_process(); END;',
        start_date      => SYSDATE,
        repeat_interval => 'FREQ=DAILY; BYHOUR=18; BYMINUTE=30; BYSECOND=0',
        enabled         => TRUE
    );
END;

-- Haciendo uso de esta consulta se podrá obtener información detallada acerca del Job */
SELECT * FROM user_scheduler_jobs WHERE job_name = 'RUN_ETL_JOB';

-- Si se desea eliminar el Job se puede ejecutar simplemente este bloque:
BEGIN
   DBMS_SCHEDULER.DROP_JOB(job_name => 'RUN_ETL_JOB');
END;
